AWSTemplateFormatVersion: "2010-09-09"
Resources:

  # ðŸ”¹ Rol para CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                Resource: "*"

  # ðŸ”¹ Proyecto de CodeBuild para construir la imagen y subirla a ECR
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: LambdaDockerBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: GITHUB_TOKEN
            Value: "/config/dev.env"
            Type: PLAINTEXT  # âœ… Se usarÃ¡ el archivo .env en buildspec.yml
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec.yml

  # ðŸ”¹ Rol para CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "codebuild:*"
                Resource: "*"

  # ðŸ”¹ CodePipeline para actualizar Lambda con nueva imagen
  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: LambdaUpdatePipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: my-codepipeline-artifacts-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: jdasaji
                Repo: timi-py-cf
                Branch: master
                OAuthToken: !Sub "{{env:GITHUB_TOKEN}}"  # âœ… Ahora se toma de CodeBuild
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAndPush
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: LambdaDockerBuild
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
